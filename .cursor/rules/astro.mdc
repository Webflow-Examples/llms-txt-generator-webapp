---
description: You are an exper in developing Astro projects with typescript that run on cloudflare workers. You understand the nuance of configuration for deployment on cloudflare workers.
alwaysApply: false
---

```

## SEO and Meta Tags

- Use Astro's <head> tag for adding meta information.
- Implement canonical URLs for proper SEO.
- Use the <SEO> component pattern for reusable SEO setups.

## Integrations and Plugins

- Utilize Astro integrations for extending functionality (e.g., @astrojs/image).
- Implement proper configuration for integrations in astro.config.mjs.
- Use Astro's official integrations when available for better compatibility.

## Build and Deployment

- This project deploys to Webflow Cloud - which uses Cloudflare Workers for Platforms
- Optimize the build process using Astro's build command.
- Implement proper environment variable handling for different environments.
- use .dev.vars for local environment variables
  -- You cannot use `import.meta.env` to access Cloudflare Worker environment variables at runtime. However environment variables like BASE_URL will always be avaialble through `import.meta.env`
  -- Astro API routes or endpoints: Access the Cloudflare runtime via `context.locals.runtime.env`
  -- In Astro components: Use `Astro.locals.runtime.env` to access environment variables
- Implement proper CI/CD pipelines for automated builds and deployments.
- Ensure there is a `.assetsignore` file in your `public/` folder with the following content:
- \_routes.json
- \_worker.js

### Environment Variable Access Table

| Context                                               | How to Access                | What You Get                                                       | Notes/Caveats                                                        |
| ----------------------------------------------------- | ---------------------------- | ------------------------------------------------------------------ | -------------------------------------------------------------------- |
| Build Time (Vite/Astro config, .astro files at build) | `import.meta.env`            | Variables defined in `.env`, `astro.config.mjs`, and Vite env vars | Only available at build time. Includes `BASE_URL`, etc.              |
| API Routes (e.g. `/api/*.ts`)                         | `context.locals.runtime.env` | Cloudflare Worker bindings (KV, D1, R2, secrets, etc.)             | Use inside API route handlers. Not available in `.astro` components. |
| Astro Components (runtime)                            | `Astro.locals.runtime.env`   | Cloudflare Worker bindings (KV, D1, R2, secrets, etc.)             | Use inside `.astro` files at runtime. Not available at build time.   |
| Client-side JS                                        | N/A                          | N/A                                                                | Cloudflare env vars are never available in client-side JS.           |

## Styling with Tailwind CSS

- Integrate Tailwind CSS with Astro @astrojs/tailwind

## Tailwind CSS Best Practices

- Use Tailwind utility classes extensively in your Astro components.
- Leverage Tailwind's responsive design utilities (sm:, md:, lg:, etc.).
- Utilize Tailwind's color palette and spacing scale for consistency.
- Implement custom theme extensions in tailwind.config.cjs when necessary.
- Never use the @apply directive

## Testing

- Implement unit tests for utility functions and helpers.
- Use end-to-end testing tools like Cypress for testing the built site.
- Implement visual regression testing if applicable.

## Accessibility

- Ensure proper semantic HTML structure in Astro components.
- Implement ARIA attributes where necessary.
- Ensure keyboard navigation support for interactive elements.

## Key Conventions

1. Follow Astro's Style Guide for consistent code formatting.
2. Use TypeScript for enhanced type safety and developer experience.
3. Implement proper error handling and logging.
4. Leverage Astro's RSS feed generation for content-heavy sites.

## Performance Metrics

- Prioritize Core Web Vitals (LCP, FID, CLS) in development.
- Use Lighthouse and WebPageTest for performance auditing.
- Implement performance budgets and monitoring.

Refer to Astro's official documentation for detailed information on components, routing, and integrations for best practices.

- Implement performance budgets and monitoring.

Refer to Astro's official documentation for detailed information on components, routing, and integrations for best practices.
```
